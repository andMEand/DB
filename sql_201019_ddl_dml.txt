select rowid, empno, ename
from emp;
--INTERVAL YEAR TO MONTH
create table sam02(
year01 interval year(3) to month);

insert into sam02
values(interval '36' month(3));

select*from sam02;

select year01, sysdate, sysdate+year01 from sam02;
-- INTERVAL DAY TO SECOND
create table sam03(
day01 interval day(3) to second);

insert into sam03
values(interval '100' day(3));

select day01, sysdate, sysdate+day01 from sam03;

select *from sam03;

--
--지금까지 실습에 사용했던 사원 테이블과 유사한 구조의 사원번호, 사원이
--름, 급여 3개의 칼럼으로 구성된 EMP01 테이블을 생성해 봅시다.
--1. CREATE TABLE 명령어로 EMP01 테이블을 새롭게 생성합시다.
create table emp01(
empno number(4),
ename varchar2(20),
sal number(7,2));
desc emp01;

create table dept01(
deptno number(2),
dname varchar2(14),
loc varchar2(13));
desc dept01;
select *from dept01; --데이터를 넣기위해 insert사용해야 한다

--<실습하기> 서브 쿼리로 테이블 생성하기

create table emp02
as
select*from emp;

desc emp02; 
desc emp;  --NOT NULL
--컬럼의 제약조건
--emp테이블의 기본키(1,낫널 2,유니크(중복X))
--새로운테이블을 만들게되면 기본조건까지는 만들어지지 않는다, 동일한컬럼과 데이터는 복사된다

CREATE TABLE EMP03
AS
SELECT EMPNO, ENAME FROM EMP;
DESC EMP03;
SELECT *FROM EMP03;


CREATE TABLE EMP04
AS
SELECT EMPNO, ENAME, SAL 
FROM EMP;
SELECT*FROM EMP04;

CREATE TABLE EMP05
AS
SELECT*FROM EMP
WHERE DEPTNO = 10;
SELECT*FROM EMP05;

CREATE TABLE EMP06
AS
SELECT*FROM EMP WHERE 1=0;  
DESC EMP06;
--WHERE 1=0; 조건은 항상 거짓입니다. 이를 이용하여 테이블의
--데이터는 가져오지 않고 구조만 복사하게 됩니다.

CREATE TABLE DEPT02
AS
SELECT*FROM DEPT 
WHERE 1=0;
SELECT *FROM DEPT02;

CREATE TABLE EMP07(A,B)
AS
SELECT EMPNO, ENAME FROM EMP;
DESC EMP07;
SELECT*FROM EMP07;
--셀렉트의 컬럼이름을 변경하는것 , 데이터타입은 동일하게 이름은 바꾸고 싶을때 사용

--
--02. 테이블 구조 변경하는 ALTER TABLE 
--
--컬럼의 추가, 삭제,컬럼의 타입이나 길이를 변경할 때 사용합니다
--ADD COLUMN 절을 사용하여 새로운 칼럼을 추가한다.
-- MODIFY COLUMN 절을 사용하여 기존 칼럼을 수정한다.
-- DROP COLUMN 절을 사용하여 기존 칼럼을 삭제한다.
--새로운 컬럼은 테이블 맨 마지막에 추가되므로 자신이 원하는위치에 만들어 넣을 수 없습니다. 
--또한 이미 이전에 추가해 놓은 로우가 존재한다면 그 로우에도
--컬럼이 추가되지만, 컬럼 값은 NULL 값으로 입력됩니다.

DESC EMP01;
--EMP01 테이블에 JOB 컬럼 추가하기
ALTER TABLE EMP01
ADD (JOB VARCHAR2(9));

ALTER TABLE EMP02
ADD(JOB2 VARCHAR2(9));
DESC EMP02;
SELECT*FROM EMP02;
--기본의 데이터가 있는 상태에서 새로운 칼럼이 추가되면 디폴트값인 널로 채워진다

ALTER TABLE DEPT02
ADD (DMGR  NUMBER(4));
SELECT*FROM DEPT02;

-- MODIFY  컬럼에 대해서 데이터 타입이나 크기, 기본 값들을 변경
DESC EMP01;
ALTER TABLE EMP01
MODIFY(JOB VARCHAR2(30));

ALTER TABLE DEPT02
MODIFY(DMGR VARCHAR2(12) NULL);
ALTER TABLE DEPT02
ADD(DMGR NUMBER(4));
DESC DEPT02;

--DROP COLUMN  테이블에 이미 존재하는 컬럼을 삭제해 봅시다. 
DESC EMP01;
ALTER TABLE EMP01
DROP COLUMN JOB;

ALTER TABLE DEPT02
DROP COLUMN DMGR;
DESC DEPT02;

--SET UNUSED 옵션 
--SET UNUSED 옵션은 사용을 논리적으로 제한할 뿐 실제로
--컬럼을 삭제하지 않기 때문에 작업 시간이 오래 걸리지 않습니다.
--그렇기 때문에 락이 걸리는 일도 일어나지 않게 됩니다. 
DESC EMP02;
ALTER TABLE EMP02  --제한
SET UNUSED(JOB2);

ALTER TABLE EMP02   --실제 삭제
DROP UNUSED COLUMNS;

DROP TABLE EMP01;   --테이블삭제


--
--데이터정의어는 한번 실행하면 복구 불가
--

--TRUNCATE  테이블의 모든 로우를 제거
--DML 명령어의 델레트는 복구가능/ 트론케이트는 복구불가능
SELECT*FROM EMP02;
TRUNCATE TABLE EMP02;
RENAME EMP02 TO TEST;

--
--데이터 딕셔너리와 데이터 딕셔너리 뷰 
--
--뷰, 사용자가 접근해서 볼수 있다
--딕셔너리는 추가 수정 삭제 등등 사용자가 못한다

DESC USER_TABLES;
SHOW USER;

SELECT TABLE_NAME FROM USER_TABLES
ORDER BY TABLE_NAME  DESC; --스콧개정이 가진 테이블리스트
SELECT * FROM USER_TABLES
WHERE TABLE_NAME ='TEST';


--ALL_ 데이터딕셔너리
--ALL_ 데이터 딕셔너리 뷰는 현재 계정이 접근 가능한 객체, 즉 자신
--계정의 소유이거나 접근 권한을 부여 받은 타계정의 객체 등을 조회
--할 수 있는 데이터 딕셔너리 뷰입니다. 

DESC ALL_TABLES;
SELECT OWNER, TABLE_NAME FROM ALL_TABLES;

--DBA_ 데이터 딕셔너리 뷰 (데이터베이스 관리자)
SELECT TABLE_NAME, OWNER FROM DBA_TABLES;

--
--10장. 테이블의 내용 추가, 수정, 삭제하는 DML(데이터 조작어)
--

--1 테이블에 새로운 행을 추가하는 INSERT 문
--2 다중 테이블에 다중 행 입력하기
--3 PIVOTING에 의해 다중 테이블에 다중 행 입력하기
--4 테이블의 내용을 수정하기 위한 UPDATE 문
--5 테이블에 불필요한 행을 삭제하기 위한 DELETE 문 
--6 테이블을 합병하는 MERGE


select*from dept01;
 
--01. 테이블에 새로운 행을 추가하는 INSERT 문 
--컬럼의 수와 밸류 다음 수가 반드시 동일해야 한다
INSERT INTO DEPT01(DEPTNO, DNAME, LOC)
VALUES(10, 'ACCOUNTING', 'NEW YORK');

--테이블이 가진 모든 칼럼을 사용할 경우 칼럼명 생략가능/ DESC를 참고해서 순서만 맞춰 나열하면 된다
DESC DEPT01;
INSERT INTO DEPT01
VALUES(20, 'RESEARCH','DALLAS');

INSERT INTO DEPT01(DEPTNO, DNAME) -- 이경우는 오류없이 NULL로 저장 가능하다
VALUES(90,'RESEARCH');
--만약 널값을 허용하지 않는 제약조건이 걸려있는경우는 위와같이 할수 없다. NOT NULL 부분은 생략할수없다



DROP TABLE SAM01;

create table sam01
(EMPNO NUMBER(4),
ENAME VARCHAR2(10),
JOB VARCHAR2(9),
SAL NUMBER(7,2));

create table sam01
AS
SELECT EMPNO, ENAME, JOB, SAL FROM EMP
WHERE 1=0;

INSERT INTO SAM01
VALUES( 1020,'ORANGE','POLICE',25000);

SELECT *FROM SAM01;
DESC SAM01;

--1.3 NULL 값 삽입하는 다양한 방법
DESC DEPT01;

INSERT INTO DEPT01(DEPTNO, DNAME)
VALUES(30, 'SALES');
SELECT*FROM DEPT01;

INSERT INTO DEPT01
VALUES(40, 'OPERATIONS',NULL);

INSERT INTO DEPT01
VALUES(50, '','CHICAGO');
INSERT INTO DEPT01(EMPNO, ENAME,SAL)
VALUES(50, '','CHICAGO');

INSERT INTO SAM01
VALUES(1030,'VERY','',25000);

DROP TABLE DEPT02;
CREATE TABLE DEPT02
AS SELECT *FROM DEPT WHERE 1=0;

SELECT*FROM SAM01;

INSERT INTO DEPT02(DEPTNO, DNAME)
SELECT DEPTNO, DNAME FROM DEPT
WHERE DEPTNO =10;

SELECT*FROM EMP
WHERE DEPTNO=10;

INSERT INTO SAM01
VALUES(7782, 'CLARK','MANAGER',2450);
INSERT INTO SAM01
VALUES(7782, 'KING','PRESIDENT',2450);
INSERT INTO SAM01
VALUES(7782, 'MILLER','CLERK',2450);

INSERT INTO SAM01
SELECT EMPNO, ENAME, JOB, SAL FROM EMP
WHERE DEPTNO=10;
--EMP에 있는 10번 부서 애들을 붙여넣으니;;;
SELECT *FROM SAM01;


--
--02. 다중 테이블에 다중 행 입력하기 
--
CREATE TABLE EMP_HIR
AS
SELECT EMPNO, ENAME,HIREDATE FROM EMP WHERE 1=0;

CREATE TABLE EMP_MGR
AS
SELECT EMPNO, ENAME,MGR FROM EMP WHERE 1=0;


INSERT ALL
INTO EMP_HIR VALUES (EMPNO, ENAME, HIREDATE)
INTO EMP_MGR VALUES (EMPNO, ENAME, MGR)
SELECT EMPNO, ENAME,HIREDATE,MGR FROM EMP
WHERE DEPTNO =20;

SELECT*FROM EMP_MGR;
SELECT*FROM EMP_HIR;

--2.1 조건(WHEN)에 의해 다중 테이블에 다중 행 입력하기
CREATE TABLE EMP_HIR02
AS
SELECT EMPNO, ENAME, HIREDATE FROM EMP WHERE 1=0;
CREATE TABLE EMP_MGR02
AS 
SELECT EMPNO, ENAME, SAL FROM EMP WHERE 1=0;


INSERT ALL
WHEN HIREDATE >'1982/01/01' THEN
INTO EMP_HIR02 VALUES(EMPNO, ENAME, HIREDATE)
WHEN SAL > 2000 THEN
INTO EMP_MGR02 VALUES(EMPNO, ENAME, SAL)
SELECT EMPNO, ENAME, HIREDATE, SAL FROM EMP;

SELECT*FROM EMP_MGR02;
SELECT*FROM EMP_HIR02;

SELECT *FROM EMP;

-- PIVOTING에 의해 다중 테이블에 다중 행 입력하기

CREATE TABLE SALES(
    SALES_ID NUMBER(4),
    WEEK_ID NUMBER(4),
    MON_SALES NUMBER(8,2),
    TUE_SALES  NUMBER(8,2),
    WED_SALES NUMBER(8,2),
    THU_SALES  NUMBER(8,2),
    FRI_SALES  NUMBER(8,2));

CREATE TABLE SALES_DATA(
     SALES_ID NUMBER(4),
    WEEK_ID NUMBER(4),
    DAILY_ID NUMBER(4),
     SLAES NUMBER(8,2)
     );
     
INSERT INTO SALES VALUES (1001,1,200,100,300,400,500);
INSERT INTO SALES VALUES (1002,2,100,300,200,500,350);

INSERT ALL
INTO SALES_DATA VALUES(SALES_ID, WEEK_ID,
        1, MON_SALES)
INTO SALES_DATA VALUES(SALES_ID, WEEK_ID,
        2, TUE_SALES)
INTO SALES_DATA VALUES(SALES_ID, WEEK_ID,
        3, WED_SALES)
INTO SALES_DATA VALUES(SALES_ID, WEEK_ID,
        4, THU_SALES)
INTO SALES_DATA VALUES(SALES_ID, WEEK_ID,
        5, FRI_SALES)
SELECT SALES_ID, WEEK_ID, MON_SALES,
TUE_SALES, WED_SALES,
THU_SALES, FRI_SALES
FROM SALES;


















--------
create table emp(  
  empno    number(4,0),  
  ename    varchar2(10),  
  job      varchar2(9),  
  mgr      number(4,0),  
  hiredate date,  
  sal      number(7,2),  
  comm     number(7,2),  
  deptno   number(2,0),  
  constraint pk_emp primary key (empno),  
  constraint fk_deptno foreign key (deptno) references dept (deptno)  
);
insert into emp  
values(  
 7839, 'KING', 'PRESIDENT', null,  
 to_date('17-11-1981','dd-mm-yyyy'),  
 5000, null, 10  
);
insert into emp  
values(  
 7698, 'BLAKE', 'MANAGER', 7839,  
 to_date('1-5-1981','dd-mm-yyyy'),  
 2850, null, 30  
);
insert into emp  
values(  
 7782, 'CLARK', 'MANAGER', 7839,  
 to_date('9-6-1981','dd-mm-yyyy'),  
 2450, null, 10  
);
insert into emp  
values(  
 7566, 'JONES', 'MANAGER', 7839,  
 to_date('2-4-1981','dd-mm-yyyy'),  
 2975, null, 20  
);
insert into emp  
values(  
 7788, 'SCOTT', 'ANALYST', 7566,  
 to_date('13-7-1987','dd-mm-rr'),  
 3000, null, 20  
);
insert into emp  
values(  
 7902, 'FORD', 'ANALYST', 7566,  
 to_date('3-12-1981','dd-mm-yyyy'),  
 3000, null, 20  
);
insert into emp  
values(  
 7369, 'SMITH', 'CLERK', 7902,  
 to_date('17-12-1980','dd-mm-yyyy'),  
 800, null, 20  
);
insert into emp  
values(  
 7499, 'ALLEN', 'SALESMAN', 7698,  
 to_date('20-2-1981','dd-mm-yyyy'),  
 1600, 300, 30  
);
insert into emp  
values(  
 7521, 'WARD', 'SALESMAN', 7698,  
 to_date('22-2-1981','dd-mm-yyyy'),  
 1250, 500, 30  
);
insert into emp  
values(  
 7654, 'MARTIN', 'SALESMAN', 7698,  
 to_date('28-9-1981','dd-mm-yyyy'),  
 1250, 1400, 30  
);
insert into emp  
values(  
 7844, 'TURNER', 'SALESMAN', 7698,  
 to_date('8-9-1981','dd-mm-yyyy'),  
 1500, 0, 30  
);
insert into emp  
values(  
 7876, 'ADAMS', 'CLERK', 7788,  
 to_date('13-7-1987', 'dd-mm-rr'),  
 1100, null, 20  
);
insert into emp  
values(  
 7900, 'JAMES', 'CLERK', 7698,  
 to_date('3-12-1981','dd-mm-yyyy'),  
 950, null, 30  
);
insert into emp  
values(  
 7934, 'MILLER', 'CLERK', 7782,  
 to_date('23-1-1982','dd-mm-yyyy'),  
 1300, null, 10  
);
select ename, dname, job, empno, hiredate, loc  
from emp, dept  
where emp.deptno = dept.deptno  
order by ename;
select dname, count(*) count_of_employees
from dept, emp
where dept.deptno = emp.deptno
group by DNAME
order by 2 desc;